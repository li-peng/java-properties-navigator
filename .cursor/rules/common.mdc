---
description: 
globs: 
alwaysApply: true
---
 
## 1 命名规范
- 必须符合开发语言的命名规范

## 2 代码注释与文档

### 注释规范

- 为公开方法和类、函数添加注释，详细描述方法功能、输入输出、异常情况及边界条件
- 代码逻辑复杂部分添加行内注释，注释语句需做到简洁明了

## 3. 代码组织与模块划分

### 分层架构

- 明确区分业务逻辑层、数据访问层、控制层及公共工具类，确保层与层之间低耦合

### 模块化设计

- 每个模块应有清晰的职责，避免单一模块承担过多任务
- 使用接口和抽象类来定义公共行为，实现具体逻辑时应依赖接口而非具体实现（依赖倒置原则）

### 异常处理

- 异常必须捕获并记录，但不吞异常，应视情况抛出或包装成自定义异常进行处理

## 4. 代码设计原则规范

### 面向对象设计原则（SOLID）

- **单一职责原则 (SRP)**: 每个类或方法只负责单一功能
- **开闭原则 (OCP)**: 模块的扩展应建立在接口或抽象的基础上，尽量避免修改已有代码
- **里氏替换原则 (LSP)**: 子类应能够替换父类，确保功能一致性
- **接口隔离原则 (ISP)**: 将庞大的接口拆分成小接口，防止冗余实现
- **依赖倒置原则 (DIP)**: 高层模块不应该依赖低层模块，均应依赖于抽象
- **迪米特法则 (LOD)**: 最少知识原则（The Least Knowledge Principle），一个类对于其他类知道的越少越好           

### 常见设计模式

- 推荐使用适当的设计模式（如工厂模式、策略模式、观察者模式、单例模式等）解决特定问题，但避免过度设计

### 高内聚低耦合

- 确保模块内部各部分高度关联、模块间低度依赖，利于代码维护与扩展

## 5. 代码可读性要求

### 代码结构清晰

- 方法尽量保持短小精悍，单一方法行数建议不超过50行（复杂逻辑可适当调整）
- 函数名、变量名和常量名必须表达明确的含义，避免使用缩写或模糊名称

### 减少代码重复

- 尽量采用工具类或公共方法封装重复逻辑

### 格式化与Lint工具

- 采用代码自动格式化工具,确保代码风格一致
- 建议配置IDE的Lint、PMD、FindBugs等代码质量检测工具，防止低级错误

## 6. 性能优化要求

### 合理选择数据结构与算法

- 根据实际业务需求选择合适的数据结构，避免不必要的复杂度和不合理的内存占用
- 对于性能关键路径，优先使用高效、稳定的算法，并在可能时进行性能测试和压力测试

### 资源管理与内存优化

- 注意使用完后及时关闭数据库连接、IO流、线程池等资源，防止内存泄露
- 合理设计缓存策略，防止缓存不当导致内存膨胀

### 并发与多线程

- 在多线程设计中确保线程安全，采用适当的锁机制或并发容器，避免死锁和竞态条件

## 7. 可扩展性要求

### 接口与抽象设计

- 通过定义统一接口或抽象类，确保扩展时不必修改现有代码

### 插件化与配置化

- 设计时考虑未来需求，适当采用插件、策略模式或配置文件方式实现业务逻辑的扩展

### 解耦与依赖注入

- 采用依赖注入框架（如Spring）降低模块间依赖耦合，促进系统灵活扩展

## 8. 易用性要求

### API设计

- 对外暴露的API应保持接口清晰、参数校验严谨、返回信息明确，尽量提供足够文档说明及示例

### 错误处理

- 错误提示需友好易懂，记录详细错误日志并提供问题追踪信息，便于后续维护与用户反馈

### 配置与环境管理

- 提供统一的配置管理，避免硬编码，应通过配置文件或集中管理平台对参数进行管理

## 9. 可测试性要求

### 单元测试

- 强制要求使用单元测试覆盖关键业务逻辑，每个模块需有独立测试用例

### 集成测试与Mock

- 对模块间接口进行集成测试，并通过Mock、Stub等手段模拟依赖环境，验证系统整体行为

### 自动化测试

- 使用CI/CD流程集成自动化测试，确保每次代码提交或版本发布前进行全面测试

## 10. 其他考虑

### 日志管理

- 采用统一的日志框架（如SLF4J + Logback/Log4j），日志分级管理（DEBUG、INFO、WARN、ERROR），详细记录关键操作和异常信息

### 安全性设计

- 对输入数据进行严格校验，防止SQL注入、XSS等常见安全漏洞
- 对敏感信息进行加密存储与传输，确保数据安全

### 持续集成与部署

- 建议使用持续集成工具（如Jenkins、GitLab CI），定期进行代码质量检查和静态分析，自动化构建及部署流程

### 代码审查与团队协作

- 推行Code Review制度，借助工具（如Gerrit、GitHub PR）进行代码审查，提高代码质量和团队协同效率
